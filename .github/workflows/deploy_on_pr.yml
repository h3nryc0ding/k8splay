name: Deployment on PR

on:
  pull_request:
    types: [ opened, synchronize, reopened ]

env:
  NAMESPACE: pr-${{ github.event.pull_request.number }}

jobs:
  CheckFE:
    uses: ./.github/workflows/frontend.yml

  CheckBE:
    uses: ./.github/workflows/backend.yml

  BuildImage:
    if: github.actor != 'dependabot[bot]'
    needs: [ CheckFE, CheckBE ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [ frontend, backend ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.app }}
          platforms: linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ matrix.app }}:${{ env.NAMESPACE }}
          cache-from: type=gha,scope=buildkit-${{ matrix.app }}-${{ env.NAMESPACE }}
          cache-to: type=gha,mode=max,scope=buildkit-${{ matrix.app }}-${{ env.NAMESPACE }}

  DeployApp:
    needs: [ BuildImage ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create GitHub Environment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const { NAMESPACE } = process.env
            
            await github.rest.repos.createOrUpdateEnvironment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment_name: `test/${NAMESPACE}`,
            })

      - name: Setup Kubectl
        uses: Azure/setup-kubectl@v3

      - name: Configure Kubectl
        env:
          K8S_CONFIG: ${{ secrets.K8S_CONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "${K8S_CONFIG}" | base64 --decode > $HOME/.kube/config
        shell: bash

      - name: Cleanup previous Resources
        run: |
          kubectl delete namespace $NAMESPACE --ignore-not-found
        shell: bash

      - name: Create Namespace and Secrets
        run: |
          kubectl create namespace $NAMESPACE
          
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ github.repository_owner }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --namespace=$NAMESPACE
          
          echo "${{ secrets.TLS_CERT }}" | base64 --decode > ./tls.crt
          echo "${{ secrets.TLS_KEY }}" | base64 --decode > ./tls.key
          kubectl create secret tls tls-secret \
            --cert=./tls.crt \
            --key=./tls.key \
            --namespace=$NAMESPACE
        shell: bash

      - name: Install App with Helm
        run: |
          helm install $NAMESPACE ./.k8s/app \
          --namespace $NAMESPACE \
          --set ingress.domain=${{ env.NAMESPACE }}.k8splay.xyz \
          --set app.image.tag=${{ env.NAMESPACE }} \
          --wait \
          --atomic \
          --timeout 60s
        shell: bash

      - name: Delete Pull Secret
        run: kubectl delete secret ghcr-secret -n $NAMESPACE
        shell: bash

      - name: Create GitHub Deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const { NAMESPACE } = process.env
            const { id } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: `test/${NAMESPACE}`,
              auto_merge: false,
              transient_environment: true,
            })
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: id,
              state: 'success',
              environment: `test/${NAMESPACE}`,
              environment_url: `https://${NAMESPACE}.k8splay.xyz`,
            })